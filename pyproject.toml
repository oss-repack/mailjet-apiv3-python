
[tool.mypy]
strict = true
# Adapted from this StackOverflow post:
# https://stackoverflow.com/questions/55944201/python-type-hinting-how-do-i-enforce-that-project-wide
python_version = "3.11"
# This flag enhances the user feedback for error messages
pretty = true
# 3rd party import
ignore_missing_imports = true
# Disallow dynamic typing
disallow_any_unimported = false
disallow_any_expr = false
disallow_any_decorated = false
disallow_any_explicit = true
disallow_any_generics = false
disallow_subclassing_any = true
# Disallow untyped definitions and calls
disallow_untyped_calls = true
disallow_untyped_defs = true
check_untyped_defs = true
disallow_incomplete_defs = true
disallow_untyped_decorators = true
# None and optional handling
no_implicit_optional = true
# Configuring warnings
warn_return_any = false
warn_no_return = true
warn_unreachable = true
warn_unused_configs = true
warn_redundant_casts = true
warn_unused_ignores = false
# Misc
follow_imports = "silent"
strict_optional = false
strict_equality = true
exclude = '''(?x)(
    (^|/)test[^/]*\.py$    # files named "test*.py"
  )'''
# Configuring error messages
show_error_context = false
show_column_numbers = false
show_error_codes = true
disable_error_code = 'import-untyped'


[tool.pytest]
collect_ignore = ['setup.py']
doesnotexist = 42
filterwarnings = "ignore::pytest.PytestConfigWarning"

[tool.pytest.ini_options]
minversion = "6.0"
addopts = "-ra -q"
testpaths = [
    "tests",  # You should have a "tests" directory
]

[tool.coverage.report]
omit = [
    "tests/*",
]
exclude_lines = [
    "pragma: no cover",
    # This covers both typing.TYPE_CHECKING and plain TYPE_CHECKING, with any amount of whitespace
    "if\\s+(typing\\.)?TYPE_CHECKING:",
    'if __name__ == "__main__":'
]

[tool.ruff]
# Exclude a variety of commonly ignored directories.
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".ipynb_checkpoints",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pyenv",
    ".pytest_cache",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    ".vscode",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "site-packages",
    "venv",
]
extend-exclude = ["tests", "test"]

# Same as Black.
line-length = 89
indent-width = 4

# Assume Python 3.11.
target-version = "py311"

[tool.ruff.lint]
# Unlike Flake8, Ruff doesn't enable pycodestyle warnings (`W`) or
# McCabe complexity (`C901`) by default.
# Enable pycodestyle (`E`) and Pyflakes (`F`) codes by default, ('UP') is pyupgrade.
# "ERA" - Found commented-out code
select = ["E", "F", "W", "N", "UP", "B", "A", "C4", "PT", "SIM", "PD", "PLE", "RUF"]

extend-select = ["W", "N", "UP", "B", "A", "C4", "PT", "SIM", "PD", "PLE", "RUF"]
# Never enforce `E501` (line length violations).
ignore = [
    'E501',
    "F401",
    'E722',
    'E741',
    'F405',
    'F811',
    'F841',
    'A001' ,
    'A002',
    'A003',
    'B008',
    'PD901',
    'PD015',
    'N802',
    'N806',
    # TODO: PLE0604 Invalid object in `__all__`, must contain only strings
    'PLE0604',
    'RUF012',
    # TODO: PT009 Use a regular `assert` instead of unittest-style `assertTrue`
    'PT009',
    # Skip for logging: UP031 Use format specifiers instead of percent format
    'UP031'
]


# Allow fix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = ["B"]

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.lint.flake8-annotations]
allow-star-arg-any = false
ignore-fully-untyped = false

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"
docstring-code-format = false
# Like Black, use double quotes for strings.

# Ignore `E402` (import violations) in all `__init__.py` files, and in `path/to/file.py`.
[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["E402"]
#"path/to/file.py" = ["E402"]

[tool.ruff.lint.isort]
force-single-line = true
force-sort-within-sections = false
lines-after-imports = 2

[tool.ruff.lint.mccabe]
# Unlike Flake8, default to a complexity level of 10.
max-complexity = 10

[tool.ruff.lint.pycodestyle]
ignore-overlong-task-comments = true

[tool.ruff.lint.pydocstyle]
convention = "numpy"
